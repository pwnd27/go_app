package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"

	"github.com/pwnd27/go_app/app"
	"github.com/pwnd27/go_app/db"
	"github.com/pwnd27/go_app/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	gc, err := app.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}
	var arg db.AddUserParams
	arg.Username = input.Username
	arg.HashedPassword = input.Password
	arg.FullName = input.FullName
	arg.Email = input.Email
	u, err := r.DB.AddUser(gc, arg)
	if err != nil {
		return nil, err
	}
	i := app.UserResponse(u)
	return &i, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	gc, err := app.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}
	var arg db.ListUsersParams
	users, err := r.DB.ListUsers(gc, arg)
	if err != nil {
		return nil, err
	}
	var items []*model.User
	for _, u := range users {
		i := app.UserResponse(u)
		items = append(items, &i)
	}
	return items, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
